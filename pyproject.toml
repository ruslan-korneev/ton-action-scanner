[project]
name = "ton-action-scanner"
version = "0.1.0"
description = ""
authors = [
  {name = "Ruslan", email = "admin@ruslan.beer"},
]
readme = "README.md"
requires-python = ">=3.12.7,<4.0"

dependencies = [
    "fastapi[all] (>=0.115.6,<0.116.0)",
    "uvicorn (>=0.34.0,<0.35.0)",
    "sqlalchemy (>=2.0.36,<2.1.0)",
    "alembic (>=1.14.0,<1.15.0)",
    "asyncpg (>=0.30.0,<0.31.0)",
    "pydantic[email] (>=2.10.4,<3.0.0)",
    "pydantic-settings (>=2.7.1,<3.0.0)",
    "sentry-sdk[loguru] (>=2.19.2,<2.20.0)",
    "loguru (>=0.7.3,<0.8.0)",
    "httpx (>=0.28.1,<0.29.0)",
    "greenlet (>=3.1.1,<3.2.0)",
    "python-jose (>=3.3.0,<3.4.0)",
    "cryptography (>=44.0.0,<45.0.0)"
]

[tool.poetry]
packages = [{include = "src"}]

[tool.poetry.group.dev.dependencies]
ipython = "^8.31.0"
ruff = "^0.8.5"
isort = "^5.13.2"
mypy = "^1.14.1"
black = "^24.10.0"
pytest-cov = "^6.0.0"
pytest-xdist = "^3.6.1"
pytest-freezegun = "^0.4.2"
pytest-mock = "^3.14.0"
pytest-env = "1.1.3"
setuptools = "^75.6.0"
asyncpg-stubs = "^0.30.0"
coverage-threshold = "^0.5.0"
coverage = "^7.6.10"
dotenv-linter = "^0.5.0"
types-python-jose = "^3.3.4.20240106"
pytest = "8.3.4"
pytest-asyncio = "^0.25.2"
pytest-httpx = "^0.35.0"
wemake-python-styleguide = "^1.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
profile = "black"
multi_line_output = 3
skip = ["migrations"]

[tool.black]
exclude = '''
/(
  | migrations
  | .venv
)/
'''
line_length = 120


[tool.ruff]
fix = true
line-length = 120
target-version = "py312"
extend-exclude = [".venv", "venv", "migrations"]

[tool.ruff.lint]
select = [
    "E", # pycodestyle
    "F", # Pyflakes
    "N", # pep8-naming
    "UP", # pyupgrade
    "BLE", # flake8-blind-except
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "DJ", # flake8-django
    "EXE", # flake8-executable
    "FA", # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "G", # flake8-logging-format
    "INP", # flake8-logging-format
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT", # flake8-pyi
    "Q", # flake8-quotes
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "INT", # flake8-gettext
    "PTH", # flake8-use-pathlib
    "FIX", # flake8-fixme
    # Ruff-specific rules
    "RUF008", # Do not use mutable default values for dataclass attributes
    "RUF009", # Do not perform function call {name} in dataclass defaults
    "RUF010", # Use explicit conversion flag
    "B035", # Dictionary comprehension uses static key: {key}
    "RUF012", # Mutable class attributes should be annotated with typing.ClassVar
    "RUF013", # PEP 484 prohibits implicit Optional
    "RUF015", # Prefer next({iterable}) over single element slice
    "RUF016", # Slice in indexed access to type {value_type} uses type {index_type} instead of an integer.
    "RUF100", # Unused noqa directive
    "RUF200", # Failed to parse pyproject.toml
]
ignore = [
    "A005",
    "FIX002", # Line contains TODO, consider resolving the issue
    "N806", # Variable `UpperCase` in function should be lowercase
]
external = [ "WPS" ]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
  "S101", # asserts
  "S105", # hardcoded passwords
  "S404", # subprocess calls are for tests
  "S603", # do not require `shell=True`
  "S607", # partial executable paths
]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
    "fastapi.Depends",
    "fastapi.params.Depends",
    "fastapi.Query",
    "fastapi.params.Query",
]

[project.entry-points."flake8.extension"]
WPS = "wemake_python_styleguide.checker:Checker"

[project.entry-points."flake8.report"]
wemake = "wemake_python_styleguide.formatter:WemakeFormatter"


[tool.mypy]
python_version = "3.12"
plugins = ["sqlalchemy.ext.mypy.plugin"]
exclude = ["migrations"]
warn_unused_configs = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unreachable = true
warn_no_return = true
namespace_packages = true
explicit_package_bases = true
disallow_untyped_defs = true
disallow_untyped_calls = false
strict = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["asyncpg", "asyncpg.exceptions"]
ignore_missing_imports = true


[tool.pytest.ini_options]
python_files = "tests_*.py test_*.py"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
addopts = "--cov-report json --cov-report term-missing:skip-covered --cov-branch  --cov=src --no-cov-on-fail"
filterwarnings = [
    "ignore::DeprecationWarning:pytest_freezegun.*:",
    "ignore::DeprecationWarning:pytest_asyncio.*:"
]

[tool.coverage.run]
parallel = true
omit = ["**/tests/*", "src/core/*"]

[coverage-threshold]
line_coverage_min = 80
branch_coverage_min = 70
